index:
  nav:
    features: Features
    resources: Resources
    facilities: Facilities
  headernav:
    tutorial: Tutorial
    practice: Practice
    example: Example
    api: API
    home: HOME
  feature:
    tpl: HTML模版
    tpl_description: 声明式的模板，在编写视图时就像是在写一个普通的页面，更符合 HTML 开发人员的习惯。
    data_driven: 数据驱动
    data_driven_description: 修改数据，视图引擎会根据绑定关系自动刷新视图，从此摆脱手工调用 DOM API 的繁琐与可能的遗漏。
    component: 组件化
    component_description: 组件是数据、逻辑与视图的聚合体。通过组件，我们封装独立的功能区块，小到输入组合，大到一个页面。
    view: High Performance View
    view_description: By modifying the data, the view engine can directly refresh the view area that needs to be changed without any detection and better performance.
    reverse: Component Reversion
    reverse_description: Optimized for the first screen and output HTML from the server side. Reverse parse components from existing elements and build bindings.
    size: Small Size
    size_description: Volume less that 15kb (gzipped), no need to worry about the burden of page downloads. The gospel of patients with volume obsessive.
    compatibility: Good compatibility
    compatibility_description: Another benefit of modifying data by method is that you can get better browser compatibility. After all, some users of our products are a bit rigid.
    module: Flexible module management
    module_description: The ESNext Module or AMD can be selected in the project. Of course, if you want to use global variables it is also supported.
    use: Convenient reference
    use_description: Support for multiple methods such as NPM, GitHub, download, HTTP and HTTPS CDN, making development and online reference more convenient.
  resource:
    description: Tutorials, documents and demos to understand and use San.
    tutorial_description: Reading the tutorials is a good starting point to learn San.
    practice_description: Practice guidelines suggest specific ways to deal with many different situations.
    example_description: Real-world demos showing how to use San.
    api: Component API
    api_description: Refer to this when you're looking for Component API manuals.
  facility:
    description: Some tools and libraries can help you build your app faster and easier.
    router_description: Support for hash and html5 mode routes to build SPA(Single Page Application) or isomorphism web applications.
    store_description: Application state management suite, the idea is a one-way flow like flux.
    update_description: Immutable's object update library, with san-store for application state data updates.
    devtool_description: Developer tools based on Chrome extensions.
article:
  edit: Edit
  gotop: Top
recommend:
  tutorial: Tutorial
  tutorial_setup: Setup
  tutorial_background: Background
  tutorial_start: Start
  tutorial_template: Template
  tutorial_data_method: Data Manipulation
  tutorial_data_checking: Data Validation
  tutorial_style: Style
  tutorial_if: Conditional
  tutorial_for: Loop
  tutorial_event: Event
  tutorial_form: Form
  tutorial_slot: Slot
  tutorial_transition: Transition
  tutorial_component: Component
  tutorial_reverse: Component Reversion
  tutorial_ssr: SSR
  more: More
  more_component_api: 组件 API
  more_main_api: 主模块 API
  more_dist_files: 发布版本说明
  more_changelog: 版本更新日志
  facilities: Facilities
  example: 示例
  example_start: 一些小示例
  example_single_way_flow: 单向流
example:
  start: small example
  start_description: Some small examples, mainly to show the usage of some small features of San.
  todos_description: An example of a Todos application that includes scenarios common to application development such as lists, in-list operations, form submissions, floating layers, and interactive components.
  todos_esnext_description: The ESNext version of the Todos app above uses webpack + babel, which is more in line with popular application development habits.
  single_way_flow: One-way flow
  todos_store_description: The one-way streaming version of the Todos app above uses san-store.
  online: Small example of online usage
practice:
  data:
    title: Data
    0: What Content is Suitable for the Data?
    1: What Content is Not Suitable for the Data?
    2: Auto camel when data bind
  tpl:
    title: View Templates
    0: Object Traversal
    1: How does an array deep update trigger a view update?
    2: How to Implement Hide and Show?
  msg:
    title: Inter-Component Messaging
    0: How to Update Child Components?
    1: Child-to-Parent Messaging
    2: How child components communicate with higher layer components
    3: Messaging from Dynamic Child Components
  component:
    title: Component Management
    0: Can we do DOM manipulation?
    1: How to deal with the absolute positioning component's DOM？
  route:
    title: Router Management
    0: How to use san-router to create a back-end system for a single-page application?
  state:
    title: Application State Management
    0: How to use san-store to implement state management of the backend system?
  faq:
    0: FAQ
